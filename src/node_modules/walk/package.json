{
  "_args": [
    [
      {
        "raw": "walk@2.3.14",
        "scope": null,
        "escapedName": "walk",
        "name": "walk",
        "rawSpec": "2.3.14",
        "spec": "2.3.14",
        "type": "version"
      },
      "C:\\Users\\wardha\\Desktop\\Express js\\src\\node_modules\\hbs"
    ]
  ],
  "_from": "walk@2.3.14",
  "_hasShrinkwrap": false,
  "_id": "walk@2.3.14",
  "_location": "/walk",
  "_nodeVersion": "10.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/walk_2.3.14_1530586105966_0.6272300847448526"
  },
  "_npmUser": {
    "name": "coolaj86",
    "email": "coolaj86@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "walk@2.3.14",
    "scope": null,
    "escapedName": "walk",
    "name": "walk",
    "rawSpec": "2.3.14",
    "spec": "2.3.14",
    "type": "version"
  },
  "_requiredBy": [
    "/hbs"
  ],
  "_resolved": "https://registry.npmjs.org/walk/-/walk-2.3.14.tgz",
  "_shasum": "60ec8631cfd23276ae1e7363ce11d626452e1ef3",
  "_shrinkwrap": null,
  "_spec": "walk@2.3.14",
  "_where": "C:\\Users\\wardha\\Desktop\\Express js\\src\\node_modules\\hbs",
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com"
  },
  "bugs": {
    "url": "https://git.coolaj86.com/coolaj86/fs-walk.js/issues"
  },
  "contributors": [],
  "dependencies": {
    "foreachasync": "^3.0.0"
  },
  "description": "A node port of python's os.walk",
  "devDependencies": {},
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-5skcWAUmySj6hkBdH6B6+3ddMjVQYH5Qy9QGbPmN8kVmLteXk+yVXg+yfk1nbX30EYakahLrr8iPcCxJQSCBeg==",
    "shasum": "60ec8631cfd23276ae1e7363ce11d626452e1ef3",
    "tarball": "https://registry.npmjs.org/walk/-/walk-2.3.14.tgz",
    "fileCount": 6,
    "unpackedSize": 23082,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbOuP6CRA9TVsSAnZWagAAdhoP/3OfNTm0IjDFDvBWiQdX\n3NbpK//gBqsPz5Q6YScSgZi+QgxyhA5b1HySsF3fVGPKuShngNNbUqs5jo4l\nH29FoJx42XXwujZsEFgp6lWEoDKcEgtS+1aSJ+0a7Kzd+niSPCob8y7mUCRR\nLGF2GXa5sfZxQcWzPfDbXM8pKe0Lynbiz0iVPmgicP9YVYZwz+itX3xcNOes\ndTwuhgzncCjb8WZKQtwkbblIxqpyYXEHUlO3xVHnJ5K5MeEFFqrYrvnysNot\n+S2g1BjrWgdeckZRhc4j9McAoKezo1syuLYHlkSil32uYjs7PDrA0Zm2Fc/f\neTkoP7qIGJVrTB2iyt6uQ5zr+wqzVlqpd0GO/Xtg3f/Ot1OYCp3r7ABjst3Z\ntZuvxF93dVWs4KRkFeHSXLEaCK5BqWcRuUpkOYLwaX6VXpubC06QEaGILlwd\n5y/eqaQ3Yv3tEgy+ROUc+UTKSbG+996IChk15zHdDNGV9cPBA1ulCqSpz583\noX7365Z9zY/HxXZrHpSmxPmEUbV1+7Hh2BYMKC38uXRs5Hvjbx/gYotk5QEF\nDpPbkUih5M3/Wc0OL3iIb+KFjK+NkUJI94NWhxj+zrvkDxRErvKCGmBjJZ7K\n87ralaRAdp5J4Xz7GJLaRx6LsdD+ApLuXsiXfDQdIWNmJ6klLbVGWOmwxlRb\nF4HP\r\n=mYh0\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "lib"
  ],
  "gitHead": "a55a943b2253e57f707572c111a8668625d399e3",
  "homepage": "https://git.coolaj86.com/coolaj86/fs-walk.js",
  "keywords": [
    "util",
    "os",
    "sys",
    "fs",
    "walk",
    "walkSync"
  ],
  "lib": ".",
  "license": "(MIT OR Apache-2.0)",
  "main": "./lib/walk.js",
  "maintainers": [
    {
      "name": "coolaj86",
      "email": "coolaj86@gmail.com"
    }
  ],
  "name": "walk",
  "optionalDependencies": {},
  "readme": "node-walk\n====\n\n| Sponsored by [ppl](https://ppl.family)\n\nnodejs walk implementation.\n\nThis is somewhat of a port python's `os.walk`, but using Node.JS conventions.\n\n  * EventEmitter\n  * Asynchronous\n  * Chronological (optionally)\n  * Built-in flow-control\n  * includes Synchronous version (same API as Asynchronous)\n\nAs few file descriptors are opened at a time as possible.\nThis is particularly well suited for single hard disks which are not flash or solid state.\n\nInstallation\n----\n\n```bash\nnpm install --save walk\n```\n\nGetting Started\n====\n\n```javascript\n(function () {\n  \"use strict\";\n\n  var walk = require('walk');\n  var fs = require('fs');\n  var walker;\n\n  walker = walk.walk(\"/tmp\", options);\n\n  walker.on(\"file\", function (root, fileStats, next) {\n    fs.readFile(fileStats.name, function () {\n      // doStuff\n      next();\n    });\n  });\n\n  walker.on(\"errors\", function (root, nodeStatsArray, next) {\n    next();\n  });\n\n  walker.on(\"end\", function () {\n    console.log(\"all done\");\n  });\n}());\n```\n\nCommon Events\n-----\n\nAll single event callbacks are in the form of `function (root, stat, next) {}`.\n\nAll multiple event callbacks callbacks are in the form of `function (root, stats, next) {}`, except **names** which is an array of strings.\n\nAll **error** event callbacks are in the form `function (root, stat/stats, next) {}`.\n**`stat.error`** contains the error.\n\n* `names`\n* `directory`\n* `directories`\n* `file`\n* `files`\n* `end`\n* `nodeError` (`stat` failed)\n* `directoryError` (`stat` succedded, but `readdir` failed)\n* `errors` (a collection of any errors encountered)\n\n\nA typical `stat` event looks like this:\n\n```javascript\n{ dev: 16777223,\n  mode: 33188,\n  nlink: 1,\n  uid: 501,\n  gid: 20,\n  rdev: 0,\n  blksize: 4096,\n  ino: 49868100,\n  size: 5617,\n  blocks: 16,\n  atime: Mon Jan 05 2015 18:18:10 GMT-0700 (MST),\n  mtime: Thu Sep 25 2014 21:21:28 GMT-0600 (MDT),\n  ctime: Thu Sep 25 2014 21:21:28 GMT-0600 (MDT),\n  birthtime: Thu Sep 25 2014 21:21:28 GMT-0600 (MDT),\n  name: 'README.md',\n  type: 'file' }\n```\n\nAdvanced Example\n====\n\nBoth Asynchronous and Synchronous versions are provided.\n\n```javascript\n(function () {\n  \"use strict\";\n\n  var walk = require('walk');\n  var fs = require('fs');\n  var options;\n  var walker;\n\n  options = {\n    followLinks: false\n    // directories with these keys will be skipped\n  , filters: [\"Temp\", \"_Temp\"]\n  };\n\n  walker = walk.walk(\"/tmp\", options);\n\n  // OR\n  // walker = walk.walkSync(\"/tmp\", options);\n\n  walker.on(\"names\", function (root, nodeNamesArray) {\n    nodeNamesArray.sort(function (a, b) {\n      if (a > b) return 1;\n      if (a < b) return -1;\n      return 0;\n    });\n  });\n\n  walker.on(\"directories\", function (root, dirStatsArray, next) {\n    // dirStatsArray is an array of `stat` objects with the additional attributes\n    // * type\n    // * error\n    // * name\n\n    next();\n  });\n\n  walker.on(\"file\", function (root, fileStats, next) {\n    fs.readFile(fileStats.name, function () {\n      // doStuff\n      next();\n    });\n  });\n\n  walker.on(\"errors\", function (root, nodeStatsArray, next) {\n    next();\n  });\n\n  walker.on(\"end\", function () {\n    console.log(\"all done\");\n  });\n}());\n```\n\n### Sync\n\nNote: You **can't use EventEmitter** if you want truly synchronous walker\n(although it's synchronous under the hood, it appears not to be due to the use of `process.nextTick()`).\n\nInstead **you must use `options.listeners`** for truly synchronous walker.\n\nAlthough the sync version uses all of the `fs.readSync`, `fs.readdirSync`, and other sync methods,\nI don't think I can prevent the `process.nextTick()` that `EventEmitter` calls.\n\n```javascript\n(function () {\n  \"use strict\";\n\n  var walk = require('walk');\n  var fs = require('fs');\n  var options;\n  var walker;\n\n  // To be truly synchronous in the emitter and maintain a compatible api,\n  // the listeners must be listed before the object is created\n  options = {\n    listeners: {\n      names: function (root, nodeNamesArray) {\n        nodeNamesArray.sort(function (a, b) {\n          if (a > b) return 1;\n          if (a < b) return -1;\n          return 0;\n        });\n      }\n    , directories: function (root, dirStatsArray, next) {\n        // dirStatsArray is an array of `stat` objects with the additional attributes\n        // * type\n        // * error\n        // * name\n\n        next();\n      }\n    , file: function (root, fileStats, next) {\n        fs.readFile(fileStats.name, function () {\n          // doStuff\n          next();\n        });\n      }\n    , errors: function (root, nodeStatsArray, next) {\n        next();\n      }\n    }\n  };\n\n  walker = walk.walkSync(\"/tmp\", options);\n\n  console.log(\"all done\");\n}());\n```\n\nAPI\n====\n\nEmitted Values\n\n  * `on('XYZ', function(root, stats, next) {})`\n\n  * `root` - the containing the files to be inspected\n  * *stats[Array]* - a single `stats` object or an array with some added attributes\n    * type - 'file', 'directory', etc\n    * error\n    * name - the name of the file, dir, etc\n  * next - no more files will be read until this is called\n\nSingle Events - fired immediately\n\n  * `end` - No files, dirs, etc left to inspect\n\n  * `directoryError` - Error when `fstat` succeeded, but reading path failed (Probably due to permissions).\n  * `nodeError` - Error `fstat` did not succeeded.\n  * `node` - a `stats` object for a node of any type\n  * `file` - includes links when `followLinks` is `true`\n  * `directory` - **NOTE** you could get a recursive loop if `followLinks` and a directory links to its parent\n  * `symbolicLink` - always empty when `followLinks` is `true`\n  * `blockDevice`\n  * `characterDevice`\n  * `FIFO`\n  * `socket`\n\nEvents with Array Arguments - fired after all files in the dir have been `stat`ed\n\n  * `names` - before any `stat` takes place. Useful for sorting and filtering.\n    * Note: the array is an array of `string`s, not `stat` objects\n    * Note: the `next` argument is a `noop`\n\n  * `errors` - errors encountered by `fs.stat` when reading ndes in a directory\n  * `nodes` - an array of `stats` of any type\n  * `files`\n  * `directories` - modification of this array - sorting, removing, etc - affects traversal\n  * `symbolicLinks`\n  * `blockDevices`\n  * `characterDevices`\n  * `FIFOs`\n  * `sockets`\n\n**Warning** beware of infinite loops when `followLinks` is true (using `walk-recurse` varient).\n\nComparisons\n====\n\nTested on my `/System` containing 59,490 (+ self) directories (and lots of files).\nThe size of the text output was 6mb.\n\n`find`:\n    time bash -c \"find /System -type d | wc\"\n    59491   97935 6262916\n\n    real  2m27.114s\n    user  0m1.193s\n    sys 0m14.859s\n\n`find.js`:\n\nNote that `find.js` omits the start directory\n\n    time bash -c \"node examples/find.js /System -type d | wc\"\n    59490   97934 6262908\n\n    # Test 1\n    real  2m52.273s\n    user  0m20.374s\n    sys 0m27.800s\n\n    # Test 2\n    real  2m23.725s\n    user  0m18.019s\n    sys 0m23.202s\n\n    # Test 3\n    real  2m50.077s\n    user  0m17.661s\n    sys 0m24.008s\n\nIn conclusion node.js asynchronous walk is much slower than regular \"find\".\n\nLICENSE\n===\n\n`node-walk` is available under the following licenses:\n\n  * MIT\n  * Apache 2\n\nCopyright 2011 - Present AJ ONeal\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "https://git.coolaj86.com/coolaj86/fs-walk.js.git"
  },
  "scripts": {
    "test": "./test/walk-test.sh"
  },
  "url": "http://git.coolaj86.com/coolaj86/fs-walk.js",
  "version": "2.3.14"
}
